// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class Stat extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Stat entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Stat must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Stat", id.toString(), this);
    }
  }

  static load(id: string): Stat | null {
    return changetype<Stat | null>(store.get("Stat", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get totalProfiles(): BigInt {
    let value = this.get("totalProfiles");
    return value!.toBigInt();
  }

  set totalProfiles(value: BigInt) {
    this.set("totalProfiles", Value.fromBigInt(value));
  }

  get totalAccounts(): BigInt {
    let value = this.get("totalAccounts");
    return value!.toBigInt();
  }

  set totalAccounts(value: BigInt) {
    this.set("totalAccounts", Value.fromBigInt(value));
  }

  get totalPosts(): BigInt {
    let value = this.get("totalPosts");
    return value!.toBigInt();
  }

  set totalPosts(value: BigInt) {
    this.set("totalPosts", Value.fromBigInt(value));
  }

  get totalComments(): BigInt {
    let value = this.get("totalComments");
    return value!.toBigInt();
  }

  set totalComments(value: BigInt) {
    this.set("totalComments", Value.fromBigInt(value));
  }

  get totalMirror(): BigInt {
    let value = this.get("totalMirror");
    return value!.toBigInt();
  }

  set totalMirror(value: BigInt) {
    this.set("totalMirror", Value.fromBigInt(value));
  }

  get totalPublications(): BigInt {
    let value = this.get("totalPublications");
    return value!.toBigInt();
  }

  set totalPublications(value: BigInt) {
    this.set("totalPublications", Value.fromBigInt(value));
  }

  get lastCommentCreatedAt(): BigInt | null {
    let value = this.get("lastCommentCreatedAt");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set lastCommentCreatedAt(value: BigInt | null) {
    if (!value) {
      this.unset("lastCommentCreatedAt");
    } else {
      this.set("lastCommentCreatedAt", Value.fromBigInt(<BigInt>value));
    }
  }

  get lastPostCreatedAt(): BigInt | null {
    let value = this.get("lastPostCreatedAt");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set lastPostCreatedAt(value: BigInt | null) {
    if (!value) {
      this.unset("lastPostCreatedAt");
    } else {
      this.set("lastPostCreatedAt", Value.fromBigInt(<BigInt>value));
    }
  }

  get lastMirrorCreatedAt(): BigInt | null {
    let value = this.get("lastMirrorCreatedAt");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set lastMirrorCreatedAt(value: BigInt | null) {
    if (!value) {
      this.unset("lastMirrorCreatedAt");
    } else {
      this.set("lastMirrorCreatedAt", Value.fromBigInt(<BigInt>value));
    }
  }

  get lastProfileCreated(): BigInt | null {
    let value = this.get("lastProfileCreated");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set lastProfileCreated(value: BigInt | null) {
    if (!value) {
      this.unset("lastProfileCreated");
    } else {
      this.set("lastProfileCreated", Value.fromBigInt(<BigInt>value));
    }
  }
}

export class Profile extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Profile entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Profile must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Profile", id.toString(), this);
    }
  }

  static load(id: string): Profile | null {
    return changetype<Profile | null>(store.get("Profile", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get profileId(): BigInt {
    let value = this.get("profileId");
    return value!.toBigInt();
  }

  set profileId(value: BigInt) {
    this.set("profileId", Value.fromBigInt(value));
  }

  get creator(): string {
    let value = this.get("creator");
    return value!.toString();
  }

  set creator(value: string) {
    this.set("creator", Value.fromString(value));
  }

  get owner(): string {
    let value = this.get("owner");
    return value!.toString();
  }

  set owner(value: string) {
    this.set("owner", Value.fromString(value));
  }

  get followNFT(): Bytes | null {
    let value = this.get("followNFT");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set followNFT(value: Bytes | null) {
    if (!value) {
      this.unset("followNFT");
    } else {
      this.set("followNFT", Value.fromBytes(<Bytes>value));
    }
  }

  get followNFTURI(): string | null {
    let value = this.get("followNFTURI");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set followNFTURI(value: string | null) {
    if (!value) {
      this.unset("followNFTURI");
    } else {
      this.set("followNFTURI", Value.fromString(<string>value));
    }
  }

  get handle(): string | null {
    let value = this.get("handle");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set handle(value: string | null) {
    if (!value) {
      this.unset("handle");
    } else {
      this.set("handle", Value.fromString(<string>value));
    }
  }

  get imageURI(): string | null {
    let value = this.get("imageURI");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set imageURI(value: string | null) {
    if (!value) {
      this.unset("imageURI");
    } else {
      this.set("imageURI", Value.fromString(<string>value));
    }
  }

  get createdAt(): BigInt | null {
    let value = this.get("createdAt");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set createdAt(value: BigInt | null) {
    if (!value) {
      this.unset("createdAt");
    } else {
      this.set("createdAt", Value.fromBigInt(<BigInt>value));
    }
  }

  get followModule(): Bytes | null {
    let value = this.get("followModule");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set followModule(value: Bytes | null) {
    if (!value) {
      this.unset("followModule");
    } else {
      this.set("followModule", Value.fromBytes(<Bytes>value));
    }
  }

  get followModuleReturnData(): Bytes | null {
    let value = this.get("followModuleReturnData");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set followModuleReturnData(value: Bytes | null) {
    if (!value) {
      this.unset("followModuleReturnData");
    } else {
      this.set("followModuleReturnData", Value.fromBytes(<Bytes>value));
    }
  }

  get dispatcher(): Bytes | null {
    let value = this.get("dispatcher");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set dispatcher(value: Bytes | null) {
    if (!value) {
      this.unset("dispatcher");
    } else {
      this.set("dispatcher", Value.fromBytes(<Bytes>value));
    }
  }

  get lastUpdated(): BigInt {
    let value = this.get("lastUpdated");
    return value!.toBigInt();
  }

  set lastUpdated(value: BigInt) {
    this.set("lastUpdated", Value.fromBigInt(value));
  }

  get totalMirrors(): BigInt {
    let value = this.get("totalMirrors");
    return value!.toBigInt();
  }

  set totalMirrors(value: BigInt) {
    this.set("totalMirrors", Value.fromBigInt(value));
  }

  get totalPosts(): BigInt {
    let value = this.get("totalPosts");
    return value!.toBigInt();
  }

  set totalPosts(value: BigInt) {
    this.set("totalPosts", Value.fromBigInt(value));
  }

  get totalComments(): BigInt {
    let value = this.get("totalComments");
    return value!.toBigInt();
  }

  set totalComments(value: BigInt) {
    this.set("totalComments", Value.fromBigInt(value));
  }

  get totalFollowers(): BigInt {
    let value = this.get("totalFollowers");
    return value!.toBigInt();
  }

  set totalFollowers(value: BigInt) {
    this.set("totalFollowers", Value.fromBigInt(value));
  }
}

export class Account extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Account entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Account must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Account", id.toString(), this);
    }
  }

  static load(id: string): Account | null {
    return changetype<Account | null>(store.get("Account", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get address(): Bytes {
    let value = this.get("address");
    return value!.toBytes();
  }

  set address(value: Bytes) {
    this.set("address", Value.fromBytes(value));
  }

  get profiles(): Array<string> {
    let value = this.get("profiles");
    return value!.toStringArray();
  }

  set profiles(value: Array<string>) {
    this.set("profiles", Value.fromStringArray(value));
  }
}

export class Creator extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Creator entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Creator must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Creator", id.toString(), this);
    }
  }

  static load(id: string): Creator | null {
    return changetype<Creator | null>(store.get("Creator", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get address(): Bytes {
    let value = this.get("address");
    return value!.toBytes();
  }

  set address(value: Bytes) {
    this.set("address", Value.fromBytes(value));
  }

  get isWhitelisted(): boolean {
    let value = this.get("isWhitelisted");
    return value!.toBoolean();
  }

  set isWhitelisted(value: boolean) {
    this.set("isWhitelisted", Value.fromBoolean(value));
  }

  get lastUpdated(): BigInt {
    let value = this.get("lastUpdated");
    return value!.toBigInt();
  }

  set lastUpdated(value: BigInt) {
    this.set("lastUpdated", Value.fromBigInt(value));
  }
}

export class Post extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Post entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Post must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Post", id.toString(), this);
    }
  }

  static load(id: string): Post | null {
    return changetype<Post | null>(store.get("Post", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get fromProfile(): string {
    let value = this.get("fromProfile");
    return value!.toString();
  }

  set fromProfile(value: string) {
    this.set("fromProfile", Value.fromString(value));
  }

  get pubId(): BigInt {
    let value = this.get("pubId");
    return value!.toBigInt();
  }

  set pubId(value: BigInt) {
    this.set("pubId", Value.fromBigInt(value));
  }

  get referenceModule(): Bytes {
    let value = this.get("referenceModule");
    return value!.toBytes();
  }

  set referenceModule(value: Bytes) {
    this.set("referenceModule", Value.fromBytes(value));
  }

  get referenceModuleReturnData(): Bytes | null {
    let value = this.get("referenceModuleReturnData");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set referenceModuleReturnData(value: Bytes | null) {
    if (!value) {
      this.unset("referenceModuleReturnData");
    } else {
      this.set("referenceModuleReturnData", Value.fromBytes(<Bytes>value));
    }
  }

  get contentURI(): string {
    let value = this.get("contentURI");
    return value!.toString();
  }

  set contentURI(value: string) {
    this.set("contentURI", Value.fromString(value));
  }

  get collectModule(): Bytes {
    let value = this.get("collectModule");
    return value!.toBytes();
  }

  set collectModule(value: Bytes) {
    this.set("collectModule", Value.fromBytes(value));
  }

  get collectModuleReturnData(): Bytes | null {
    let value = this.get("collectModuleReturnData");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set collectModuleReturnData(value: Bytes | null) {
    if (!value) {
      this.unset("collectModuleReturnData");
    } else {
      this.set("collectModuleReturnData", Value.fromBytes(<Bytes>value));
    }
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }
}

export class Mirror extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Mirror entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Mirror must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Mirror", id.toString(), this);
    }
  }

  static load(id: string): Mirror | null {
    return changetype<Mirror | null>(store.get("Mirror", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get fromProfile(): string {
    let value = this.get("fromProfile");
    return value!.toString();
  }

  set fromProfile(value: string) {
    this.set("fromProfile", Value.fromString(value));
  }

  get pubId(): BigInt {
    let value = this.get("pubId");
    return value!.toBigInt();
  }

  set pubId(value: BigInt) {
    this.set("pubId", Value.fromBigInt(value));
  }

  get referenceModule(): Bytes {
    let value = this.get("referenceModule");
    return value!.toBytes();
  }

  set referenceModule(value: Bytes) {
    this.set("referenceModule", Value.fromBytes(value));
  }

  get referenceModuleReturnData(): Bytes | null {
    let value = this.get("referenceModuleReturnData");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set referenceModuleReturnData(value: Bytes | null) {
    if (!value) {
      this.unset("referenceModuleReturnData");
    } else {
      this.set("referenceModuleReturnData", Value.fromBytes(<Bytes>value));
    }
  }

  get profileIdPointed(): BigInt {
    let value = this.get("profileIdPointed");
    return value!.toBigInt();
  }

  set profileIdPointed(value: BigInt) {
    this.set("profileIdPointed", Value.fromBigInt(value));
  }

  get pubIdPointed(): BigInt {
    let value = this.get("pubIdPointed");
    return value!.toBigInt();
  }

  set pubIdPointed(value: BigInt) {
    this.set("pubIdPointed", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }
}

export class Comment extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Comment entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Comment must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Comment", id.toString(), this);
    }
  }

  static load(id: string): Comment | null {
    return changetype<Comment | null>(store.get("Comment", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get fromProfile(): string {
    let value = this.get("fromProfile");
    return value!.toString();
  }

  set fromProfile(value: string) {
    this.set("fromProfile", Value.fromString(value));
  }

  get pubId(): BigInt {
    let value = this.get("pubId");
    return value!.toBigInt();
  }

  set pubId(value: BigInt) {
    this.set("pubId", Value.fromBigInt(value));
  }

  get referenceModule(): Bytes {
    let value = this.get("referenceModule");
    return value!.toBytes();
  }

  set referenceModule(value: Bytes) {
    this.set("referenceModule", Value.fromBytes(value));
  }

  get referenceModuleReturnData(): Bytes | null {
    let value = this.get("referenceModuleReturnData");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set referenceModuleReturnData(value: Bytes | null) {
    if (!value) {
      this.unset("referenceModuleReturnData");
    } else {
      this.set("referenceModuleReturnData", Value.fromBytes(<Bytes>value));
    }
  }

  get contentURI(): string {
    let value = this.get("contentURI");
    return value!.toString();
  }

  set contentURI(value: string) {
    this.set("contentURI", Value.fromString(value));
  }

  get profileIdPointed(): BigInt {
    let value = this.get("profileIdPointed");
    return value!.toBigInt();
  }

  set profileIdPointed(value: BigInt) {
    this.set("profileIdPointed", Value.fromBigInt(value));
  }

  get pubIdPointed(): BigInt {
    let value = this.get("pubIdPointed");
    return value!.toBigInt();
  }

  set pubIdPointed(value: BigInt) {
    this.set("pubIdPointed", Value.fromBigInt(value));
  }

  get collectModule(): Bytes | null {
    let value = this.get("collectModule");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set collectModule(value: Bytes | null) {
    if (!value) {
      this.unset("collectModule");
    } else {
      this.set("collectModule", Value.fromBytes(<Bytes>value));
    }
  }

  get collectModuleReturnData(): Bytes | null {
    let value = this.get("collectModuleReturnData");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set collectModuleReturnData(value: Bytes | null) {
    if (!value) {
      this.unset("collectModuleReturnData");
    } else {
      this.set("collectModuleReturnData", Value.fromBytes(<Bytes>value));
    }
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }
}
